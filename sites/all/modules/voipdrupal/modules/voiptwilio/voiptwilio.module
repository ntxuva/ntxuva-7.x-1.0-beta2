<?php
// $Id$

/**
 * @file
 * Adds support for sending and receiving VoIP requests to and from Twilio.
 */

//-----------------------------------------------------------------------------
// Public functions
//-----------------------------------------------------------------------------
require_once(dirname(__FILE__) . '/includes/voiptwilio.inc');

/**
 * Implements hook_voip_serverinfo().
 */
function voiptwilio_voipserver_info() {
  $server = new VoipTwilioServer();
  return $server;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function voiptwilio_admin_form($configuration) {
  $form['voiptwilio_account_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Twilio Account SID'),
    '#description' => t("The account SID provided in your Twilio account dashboard."),
    '#default_value' => (isset($configuration['voiptwilio_account_sid']) ? $configuration['voiptwilio_account_sid'] : ''),
  );

  $form['voiptwilio_auth_token'] = array(
    '#type' => 'password',
    '#title' => t('Twilio Auth Token'),
    '#description' => t("The authorization token provided in your Twilio account dashboard."),
    '#default_value' => (isset($configuration['voiptwilio_auth_token']) ? $configuration['voiptwilio_auth_token'] : ''),
    '#attributes' => array('value' => $configuration['voiptwilio_auth_token']),
  );

  $server = voiptwilio_voipserver_info();
  $voices = VoipVoice::getVoices(NULL, NULL, NULL, $server->getId());
  $form['voipcall_voice_id'] = array(
    '#type' => 'select',
    '#title' => t('Default voice'),
    '#description' => t('Voice to be used in automatic text-to-speech generation.'),
    '#options' =>  voipcall_get_voices_as_list($voices),
    '#default_value' => $server->getDefaultVoice()->getVoiceId(),
  );

  $man_voices =  VoipVoice::getVoices(NULL, "man", NULL, $server->getId());
  $form['voipcall_man_voice_id'] = array(
    '#type' => 'select',
    '#title' => t('Default man voice'),
    '#description' => t('Man voice to be used in automatic text-to-speech generation.'),
    '#options' =>  voipcall_get_voices_as_list($man_voices),
    '#default_value' => $server->getDefaultManVoice()->getVoiceId(),
  );

  $woman_voices =  VoipVoice::getVoices(NULL, "woman", NULL, $server->getId());
  $form['voipcall_woman_voice_id'] = array(
    '#type' => 'select',
    '#title' => t('Default woman voice'),
    '#description' => t('Woman voice to be used in automatic text-to-speech generation.'),
    '#options' =>  voipcall_get_voices_as_list($woman_voices),
    '#default_value' => $server->getDefaultWomanVoice()->getVoiceId(),
  );

  return $form;
}

/**
 * Validates the submission of the configuration form.
 */
function voiptwilio_admin_form_validate($form, &$form_state) {
// preserve the value of the password fields
  $old_settings = variable_get('voip_twilio_settings', '');
  $field = 'voiptwilio_auth_token';
  if (!$form_state['values'][$field]) {
    $form_state['values'][$field] = $old_settings[$field];
  }

  // Send a test request to validate the configuration of the Twilio server
  $values = $form_state['values'];
  $result = VoipTwilioServer::ping($values);

  if (voip_error()) {
    form_set_error('', t('A Twilio-related error occurred: @error', array('@error' => voip_error_message())));
  }
}

/*
 * Implementation of hook_menu()
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */

function voiptwilio_menu() {
  $items = array();

  $items['voip/twilio/callhandler'] = array(
    'title' => 'VoIP Twilio call handler',
    'description' => 'Handles incoming calls from Twilio.',
    // Note: Since both incoming calls and Twilio responses are received
    // via the same callhandler menu, the specific call permissions are to
    // be checked inside the call handler function itself.
    'access callback' => TRUE,
    'page callback' => '_voiptwilio_call_handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_voip_getvoices().
 */
function voiptwilio_voip_getvoices($language , $gender, $is_local, $voice_provider) {

  if($voice_provider && $voice_provider != 'twilio') {
    //Return empty if filtering by voice provider which is not twilio
    return array();
  }
  if($is_local === TRUE) {
    //This module doesn't declare local voices
    return array();
  }

  $voices = VoipTwilioServer::_get_available_voices();
  $voipvoices = array();
    //Search
    foreach($voices as $key => $voice) {
    if($language && $gender) {
      //Search by language and gender
      $genders = array($gender, 'neutral');
      if($voice['language'] == $language && in_array($voice['gender'], $genders)) {
        $voipvoices[$key] = new VoipVoice($key, $voice['voice'], $voice['language'], $voice['description']);
      }
    }
    else if($language) {
       //Search by language
      if($voice['language'] == $language ) {
        $voipvoices[$key] = new VoipVoice($key, $voice['voice'], $voice['language'], $voice['description']);
      }
    }
    else if($gender) {
       //Search by gender
       $genders = array($gender, 'neutral');
      if(in_array($voice['gender'], $genders)) {
        $voipvoices[$key] = new VoipVoice($key, $voice['voice'], $voice['language'], $voice['description']);
      }
    }
    else {
      $voipvoices[$key] = new VoipVoice($key, $voice['voice'], $voice['language'], $voice['description']);
    }
  }

  return $voipvoices;
}
