<?php
// $Id$

/**
 * @file
 * Adds support for sending and receiving VoIP requests to and from Plivo.
 */
//-----------------------------------------------------------------------------
// Public functions
//-----------------------------------------------------------------------------
module_load_include('php', 'voipplivocloud', 'plivo');
module_load_include('inc', 'voipplivocloud', 'voipplivocloud');
module_load_include('inc', 'voipplivocloud', 'voipplivocloudserver');
/**
 * Implements hook_voip_serverinfo().
 */
function voipplivocloud_voipserver_info() {
  $server = new VoipPlivoCloudServer();
  return $server;
}

function voipplivocloud_admin_form($configuration) {

  $form['voipplivocloud_auth_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Plivo Auth ID'),
    '#description' => t("The auth ID defined provided in your Plivo dashboard."),
    '#default_value' => isset($configuration['voipplivocloud_auth_id']) ? $configuration['voipplivocloud_auth_id'] : '',
  );

  $form['voipplivocloud_auth_token'] = array(
    '#type' => 'password',
    '#title' => t('Plivo Auth Token'),
    '#description' => t("The auth token provided in your Plivo dashboard."),
    '#default_value' => isset($configuration['voipplivocloud_auth_token']) ? $configuration['voipplivocloud_auth_token'] : '',
    '#attributes' => array('value' => $configuration['voipplivocloud_auth_token']),
  );

  $server = voipplivocloud_voipserver_info();
  $voices = VoipVoice::getVoices(NULL, NULL, NULL, $server->getId());
  $form['voipcall_voice_id'] = array(
    '#type' => 'select',
    '#title' => t('Default voice'),
    '#description' => t('Voice to be used in automatic text-to-speech generation.'),
    '#options' => voipcall_get_voices_as_list($voices),
    '#default_value' => $server->getDefaultVoice()->getVoiceId(),
  );

  $man_voices = VoipVoice::getVoices(NULL, "man", NULL, $server->getId());
  $form['voipcall_man_voice_id'] = array(
    '#type' => 'select',
    '#title' => t('Default man voice'),
    '#description' => t('Man voice to be used in automatic text-to-speech generation.'),
    '#options' => voipcall_get_voices_as_list($man_voices),
    '#default_value' => $server->getDefaultManVoice()->getVoiceId(),
  );

  $woman_voices = VoipVoice::getVoices(NULL, "woman", NULL, $server->getId());
  $form['voipcall_woman_voice_id'] = array(
    '#type' => 'select',
    '#title' => t('Default woman voice'),
    '#description' => t('Woman voice to be used in automatic text-to-speech generation.'),
    '#options' => voipcall_get_voices_as_list($woman_voices),
    '#default_value' => $server->getDefaultWomanVoice()->getVoiceId(),
  );

  return $form;
}

/**
 * Validates the submission of the configuration form.
 */
function voipplivocloud_admin_form_validate($form, &$form_state) {
  // preserve the value of the password fields
  $old_settings = variable_get('voip_plivocloud_settings', '');
  $field = 'voipplivocloud_auth_token';
  if (!$form_state['values'][$field]) {
    $form_state['values'][$field] = $old_settings[$field];
  }

  // Send a test request to validate the configuration of the Plivo server
  $values = $form_state['values'];
  $result = VoipPlivoCloudServer::ping($values);

  if (voip_error()) {
    form_set_error('', t('A Plivo-related error occurred: @error', array('@error' => voip_error_message())));
  }
}

/*
 * Implements hook_menu()
 */
function voipplivocloud_menu() {
  $items = array();

  $items['voip/plivocloud/callhandler'] = array(
    'title' => t('VoIP Plivo Cloud call handler'),
    'description' => t('Handles incoming calls from Plivo Cloud.'),
    // Note: Since both incoming calls and Plivo responses are received
    // via the same callhandler menu, the specific call permissions are to
    // be checked inside the call handler function itself.
    'access callback' => TRUE,
    'page callback' => '_voipplivocloud_call_handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_voip_getvoices().
 */
function voipplivocloud_voip_getvoices($language, $gender, $is_local, $voice_provider) {
  if ($voice_provider && $voice_provider != 'plivocloud') {
    //Return empty if filtering by voice provider which is not plivo cloud
    return array();
  }
  if ($is_local === TRUE) {
    //This module doesn't declare local voices
    return array();
  }

  $voices = VoipPlivoCloudServer::_get_available_voices();
  //Search
  foreach ($voices as $key => $voice) {
    if ($language && $gender) {
      $genders = array($gender, 'neutral');
      //Search by language and gender
      if ($voice['language'] == $language && in_array($voice['voice'], $genders)) {
        $voipvoices[$key] = new VoipVoice($key, $voice['voice'], $voice['language'], $voice['description']);
      }
    }
    else {
      if ($language) {
        //Search by language
        if ($voice['language'] == $language) {
          $voipvoices[$key] = new VoipVoice($key, $voice['voice'], $voice['language'], $voice['description']);
        }
      }
      else {
        if ($gender) {
          //Search by gender
          $genders = array($gender, 'neutral');
          if (in_array($voice['voice'], $genders)) {
            $voipvoices[$key] = new VoipVoice($key, $voice['voice'], $voice['language'], $voice['description']);
          }
        }
        else {
          $voipvoices[$key] = new VoipVoice($key, $voice['voice'], $voice['language'], $voice['description']);
        }
      }
    }
  }

  return $voipvoices;
}
