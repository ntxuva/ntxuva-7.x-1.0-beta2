<?php
/**
 * @file
 * This module provides hooks for altering the report form and
 * custom UUID generator
 * http://drupal.org/node/1588044
 */


/**
 * Implements hook_form_FORM_ID_alter().
 */
function markaspot_uuid_form_report_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide the title form field as it is generated via hook_insert
  $form['title']['#type'] = "hidden";
  $form['title']['#required'] = FALSE;
}


/**
 * Generates an universally unique identifier.
 *
 * This function first checks for the PECL alternative for generating
 * universally unique identifiers. If that doesn't exist, then it falls back on
 * PHP for generating that.
 *
 * @return string
 *   An UUID, made up of year, month and 8 hex digits.
 */
function markaspot_uuid_generate_uuid() {

  $callback = 'markaspot_uuid_generate_mas';
  return $callback();
}

/**
 * Generating a human readable UUID (not really GUID).
 *
 * @return string
 *   the UUID
 */
function markaspot_uuid_generate_mas() {

  // First get the last inserted node-id.
  $last_nid = db_query(db_query_range("SELECT nid FROM {node} ORDER BY nid DESC", 0, 1))->fetchField();
  $next_nid = $last_nid + 1;

  // Assuming other entities will be less frequently generated.
  // Taxonomies should still be unique.
  $uuid_pattern = array(
    '%04x','0x%1x','%04x%04x',
  );

  $uuid_preset_length = variable_get('markaspot_logic_uuid_pattern', 0);
  $uuid_offset = variable_get('markaspot_logic_uuid_offset', 0);
  $next_id = ($next_nid - $uuid_offset > 0) ? $next_nid - $uuid_offset : $next_nid;

  if ($uuid_preset_length <= 2) {

    return sprintf($uuid_pattern[$uuid_preset_length],
      // 32 bits for "time_low".
      mt_rand(0, 65535),
      // 16 bits for "time_mid".
      mt_rand(0, 65535)) . '-' . $next_id;
  }
  else {

    return variable_get('markaspot_logic_uuid_prefix', 'A-') . '-' . $next_id;
  }
}


/**
 * Implements hook_node_insert().
 *
 * Need to update the title field with UUID
 */
function markaspot_uuid_node_insert($node) {

  if ($node->type == 'report') {
    // Instead of contributed module auto entity_title:
    // Get the service name by ID and update the title field.
    $tid = $node->field_category[LANGUAGE_NONE][0]['tid'];
    $service = taxonomy_term_load($tid);
    markaspot_uuid_update_title($node, $service);
  }
}

/**
 * Implements hook_node_update().
 *
 * Need to update the title field with UUID
 */
function markaspot_uuid_node_update($node) {

  if ($node->type == 'report') {
    // Instead of contributed module auto entity_title:
    // Get the service name by ID and update the title field.
    $tid = $node->field_category[LANGUAGE_NONE][0]['tid'];
    $service = taxonomy_term_load($tid);
    markaspot_uuid_update_title($node, $service);
  }
}


/**
 * Generating a title.
 *
 * @param object $node
 *   The node object
 *
 * @param object $service
 *   The term by $tid
 */
function markaspot_uuid_update_title($node, $service) {
  $title_pattern = variable_get('markaspot_logic_title_pattern', 0);

  if (variable_get('markaspot_logic_uuid_title') == 1) {
    $generated_title = array(
      $service->name . ' #' . $node->uuid,
      '#' . $node->uuid . " " . $service->name,
    );
  }
  else {
    $title_pattern = "default";
    $generated_title["default"] = $service->name;
  }

  db_update('node')
    ->fields(array(
      'title' => $generated_title[$title_pattern],
    ))
    ->condition('nid', $node->nid, '=')
    ->execute();

  db_update('node_revision')
    ->fields(array(
      'title' => $generated_title[$title_pattern],
    ))
    ->condition('nid', $node->nid, '=')
    ->execute();
}
