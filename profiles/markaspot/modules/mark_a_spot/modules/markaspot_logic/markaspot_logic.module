<?php
/**
 * @file
 * Mark-a-Spot logic module.
 * This module provides styles, scripts and views for Mark-a-Spot Installation
 * and implements some server-side validation and geocoding
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function markaspot_logic_form_report_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  unset($form['field_status'][LANGUAGE_NONE]['#options']['_none']);
  $form['field_address'][LANGUAGE_NONE][0]['value']['#type'] = "hidden";
  // Registered users' mail will be prefilled:
  if (isset($user->mail) && arg(0) == 'node' && arg(1) == 'add') {
    $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->mail;
  }
  $form['#validate'][] = 'markaspot_logic_validate';
}

/**
 * Form validation handler for report form.
 *
 * @see markaspot_logic_form_report_node_form_alter()
 */
function markaspot_logic_validate($form, &$form_state) {

  $mail = $form_state['values']['field_e_mail'][LANGUAGE_NONE][0]['value'];

  if (isset($mail) && !valid_email_address($mail)) {
    form_set_error('field_e_mail', t('Please enter a valid e-mail address.'));
  }

  $validate_cities = explode(",", variable_get('markaspot_logic_city'));

  // Transform cities into a readable string.
  if (count(array_keys($validate_cities)) > 1) {
    $last_element = array_pop($validate_cities);
    $area = implode(", ", $validate_cities);
    $area = $area . ' ' . t('or') . ' ' . $last_element;
  }
  else {
    $area = $validate_cities[0];
  }
  // Iterate through all strings.
  $valid = array();

  foreach ($validate_cities as $validate_city) {
    $valid[] = strstr($form_state['values']['field_geo'][LANGUAGE_NONE][0]['address']['field'], $validate_city) ? TRUE : FALSE;
  }

  if (!in_array(TRUE, $valid)) {
    form_set_error('field_geo', t('Sorry, we only operate in the following areas: @area', array('@area' => $area)));
  }

  /* Bounding Box */
  $lat = $form_state['values']['field_geo'][LANGUAGE_NONE][0]['lat'];
  $lon = $form_state['values']['field_geo'][LANGUAGE_NONE][0]['lng'];

  $north_west = FALSE;
  $south_east = FALSE;

  $bbox = array(
    'nw' => array(
      'lat' => variable_get('markaspot_logic_bbox_nw_lat'),
      'lng' => variable_get('markaspot_logic_bbox_nw_lng'),
    ),
    'se' => array(
      'lat' => variable_get('markaspot_logic_bbox_se_lat'),
      'lng' => variable_get('markaspot_logic_bbox_se_lng'),
    ),
  );

  if (($bbox['nw']['lat'] >= $lat) && ($bbox['nw']['lng'] <= $lon)) {
    $north_west = TRUE;
  }
  if (($bbox['se']['lat'] <= $lat) && ($bbox['se']['lng'] >= $lon)) {
    $south_east = TRUE;
  }

  if ($south_east == FALSE || $north_west == FALSE) {
    form_set_error('field_geo', t('The position does not seem to be inside a valid bounding box in @area',
      array('@area' => $area)));
  }
  else {
    // Fill the address field only, if it's not equal to the initial value:
    if ($form_state['values']['field_geo'][LANGUAGE_NONE][0]['lat'] != variable_get('markaspot_logic_ini_lat')) {
      $form_state['values']['field_address'][LANGUAGE_NONE][0]['value'] = $form_state['values']['field_geo'][LANGUAGE_NONE][0]['address']['field'];
    }
    else {
      form_set_error('field_geo', t('Please enter a location, different from the default one'));
    }
  }
}

/**
 * Implements hook_page_build().
 *
 * - adds some php information to js
 * - adds css
 * - needs refactoring for leaflet
 */
function markaspot_logic_page_build(&$page) {
  $node = menu_get_object();
  $type = (isset($node)) ? $node->type : NULL;
  drupal_add_js(array(
    'mas' => array(
      'markaspot_address' => variable_get('markaspot_logic_address'),
      'markaspot_city' => variable_get('markaspot_logic_city'),
      'markaspot_ini_lat' => variable_get('markaspot_logic_ini_lat'),
      'markaspot_ini_lng' => variable_get('markaspot_logic_ini_lng'),
      'bbox_nw_lat' => variable_get('markaspot_logic_bbox_nw_lat'),
      'bbox_nw_lng' => variable_get('markaspot_logic_bbox_nw_lng'),
      'bbox_se_lat' => variable_get('markaspot_logic_bbox_se_lat'),
      'bbox_se_lng' => variable_get('markaspot_logic_bbox_se_lng'),
      'uri' => request_uri(),
      'node_type' => $type,
      'params' => $_GET,
    ),
  ), 'setting');

  if (variable_get('markaspot_logic_map_type') == 1) {
    drupal_add_js(array(
      'mas' => array(
        'cloudmade_api_key' => variable_get('markaspot_logic_cloudmade_api_key'),
      ),
    ), 'setting');
  }
  else {
    drupal_add_js(array(
      'mas' => array(
        'osm_custom_tile_url' => variable_get('markaspot_logic_osm_custom_tile_url'),
        'osm_custom_attribution' => variable_get('markaspot_logic_osm_custom_attribution'),
      ),
    ), 'setting');
  }

  drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/Leaflet.awesome-markers/dist/leaflet.awesome-markers.css');
  drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/markaspot-font/style.css');

  if (arg(0) == "list" || arg(0) == "map" || drupal_is_front_page() == TRUE) {
    drupal_add_js(drupal_get_path('profile', 'markaspot') . '/libraries/spin.js/spin.js', NULL);

    if (variable_get('markaspot_logic_map_type') == 0) {
      drupal_add_js('https://maps.google.com/maps/api/js?sensor=true&v=3.13', 'external');
      drupal_add_js(drupal_get_path('profile', 'markaspot') . '/libraries/markerclusterer/markerclusterer_compiled.js', NULL);
      drupal_add_js(drupal_get_path('profile', 'markaspot') . '/libraries/mapiconmaker/mapiconmaker.js', NULL);
      drupal_add_js(drupal_get_path('module', 'markaspot_logic') . '/js/markers_googlemaps.js', NULL);
    }
    else {
      drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/leaflet/leaflet.css');
      drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/leaflet/leaflet.ie.css', array(
        'group' => CSS_THEME,
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE,
        ),
      ));
      drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.css');
      drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.Default.css');
      drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.Default.ie.css', array(
        'group' => CSS_THEME,
        'browsers' => array(
          'IE' => 'lte IE 8',
          '!IE' => FALSE,
        ),
      ));

      drupal_add_js(drupal_get_path('profile', 'markaspot') . '/libraries/leaflet/leaflet.js');
      drupal_add_js(drupal_get_path('module', 'markaspot_logic') . '/js/markers_leaflet.js');
      drupal_add_js(drupal_get_path('profile', 'markaspot') . '/libraries/Leaflet.awesome-markers/dist/leaflet.awesome-markers.min.js', NULL);
      drupal_add_js(drupal_get_path('profile', 'markaspot') . '/libraries/Leaflet.markercluster/dist/leaflet.markercluster.js', NULL);

    }
  }

  if (strstr(current_path(), 'system/mark_a_spot')) {
    drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/leaflet/leaflet.css');
    drupal_add_js(drupal_get_path('profile', 'markaspot') . '/libraries/leaflet/leaflet.js');
    drupal_add_js(drupal_get_path('profile', 'markaspot') . '/libraries/Leaflet.draw/dist/leaflet.draw.js', NULL);
    drupal_add_css(drupal_get_path('profile', 'markaspot') . '/libraries/Leaflet.draw/dist/leaflet.draw.css');
    drupal_add_js(drupal_get_path('module', 'markaspot_logic') . '/js/markaspot_logic.js');
    drupal_add_css(drupal_get_path('module', 'markaspot_logic') . '/css/markaspot_logic.css');

  };

  drupal_add_css(drupal_get_path('module', 'custom') . '/css/custom.css', array(
    'group' => CSS_DEFAULT,
    'every_page' => TRUE,
  ));
  drupal_add_css(drupal_get_path('module', 'markaspot_logic') . '/css/mas-style.css');
}


/**
 * Implements hook_menu().
 *
 * - Callback to feedback page accessible for all
 * - Menu item for system settings page accessible for admins
 */
function markaspot_logic_menu() {
  $items = array();

  $items['admin/config/system/mark_a_spot'] = array(
    'title' => 'Mark-a-Spot',
    'description' => 'Basic configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('markaspot_logic_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),

  );
  $items['admin/config/system/mark_a_spot/tweets/import'] = array(
    'title' => 'Manual twitter import',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Manual twitter import',
    'page callback' => '_markaspot_tweet311_import_manual',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'markaspot_tweet311.module',
    'file path' => drupal_get_path('module', 'markaspot_tweet311'),
  );

  return $items;
}


/**
 * Implements hook_admin_settings().
 */
function markaspot_logic_admin_settings() {

  $form = array();
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
    '#collapsible' => TRUE,
  );
  $form['general']['markaspot_logic_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Initial Address'),
    '#default_value' => variable_get('markaspot_logic_address', markaspot_logic_defaults('markaspot_logic_address')),
    '#size' => '128',
    '#maxlength' => 128,
    '#description' => t('Insert the initial address'),
  );

  $form['general']['markaspot_logic_city'] = array(
    '#type' => 'textarea',
    '#title' => t('Validation of City Name Strings'),
    '#default_value' => variable_get('markaspot_logic_city', markaspot_logic_defaults('markaspot_logic_city')),
    '#size' => '16',
    '#description' => t('Insert a comma separated list of valid names, this installation is built for, eg. "New York, NY, Big Apple"'),
  );

  $form['general']['markaspot_logic_ini_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Inital Lat'),
    '#default_value' => variable_get('markaspot_logic_ini_lat', markaspot_logic_defaults('markaspot_logic_ini_lat')),
    '#size' => '16',
    '#maxlength' => 32,
    '#description' => t('Insert the initial latitude'),
  );
  $form['general']['markaspot_logic_ini_lng'] = array(
    '#type' => 'textfield',
    '#title' => t('Inital Lng'),
    '#default_value' => variable_get('markaspot_logic_ini_lng', markaspot_logic_defaults('markaspot_logic_ini_lng')),
    '#size' => '16',
    '#maxlength' => 32,
    '#description' => t('Insert the initial longitude'),
  );
  $form['types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Map Types'),
    '#collapsible' => TRUE,
  );
  $form['types']['markaspot_logic_map_type'] = array(
    '#type' => 'radios',
    '#title' => t('Map type'),
    '#default_value' => variable_get('markaspot_logic_map_type', 0),
    '#options' => array(t('Google Maps'), t('Cloudmade'), t('Other OSM')),
  );
  $form['types']['markaspot_logic_cloudmade_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Cloudmade API Key'),
    '#default_value' => variable_get('markaspot_logic_cloudmade_api_key'),
    '#description' => t('Insert your API Key here'),
  );
  $form['types']['osm']['markaspot_logic_osm_custom_tile_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Tile URL, if not from Cloudmade'),
    '#default_value' => variable_get('markaspot_logic_osm_custom_tile_url', markaspot_logic_defaults('markaspot_logic_osm_custom_tile_url')),
    '#description' => t('If you want to use a different tile service or https with cloudmade, enter the url pattern, e.g. http://{s}.somedomain.com/your-api-key/{z}/{x}/{y}.png'),
  );
  $form['types']['osm']['markaspot_logic_osm_custom_attribution'] = array(
    '#type' => 'textfield',
    '#title' => t('Attribution Statement, if not from Cloudmade'),
    '#default_value' => variable_get('markaspot_logic_osm_custom_attribution', markaspot_logic_defaults('markaspot_logic_osm_custom_attribution')),
    '#description' => t('If you use an alternative Operator for serving tiles show special attribution'),
  );

  $form['bbox'] = array(
    '#suffix' => '<div id="map-wrapper"><div id="settings-map"></div></div>',
    '#type' => 'fieldset',
    '#title' => t('Bounding Box'),
    '#collapsible' => TRUE,
    '#description' => t('Draw a rectancle (click on the black box) in the map to mark the boundaries for valid reports'),
  );

  $form['bbox']['markaspot_logic_bbox_nw_lat'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('markaspot_logic_bbox_nw_lat', markaspot_logic_defaults('markaspot_logic_bbox_nw_lat')),
    '#title' => t('North-West latitude.'),
  );
  $form['bbox']['markaspot_logic_bbox_nw_lng'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('markaspot_logic_bbox_nw_lng', markaspot_logic_defaults('markaspot_logic_bbox_nw_lng')),
    '#title' => t('North-West longitude.'),
  );

  $form['bbox']['markaspot_logic_bbox_se_lat'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('markaspot_logic_bbox_se_lat', markaspot_logic_defaults('markaspot_logic_bbox_se_lat')),
    '#title' => t('South-East latitude.'),
  );
  $form['bbox']['markaspot_logic_bbox_se_lng'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('markaspot_logic_bbox_se_lng', markaspot_logic_defaults('markaspot_logic_bbox_se_lng')),
    '#title' => t('South-East longitude.'),
  );
  if (module_exists('markaspot_open311')) {
    $form['open311'] = array(
      '#type' => 'fieldset',
      '#title' => t('Open311 Service Discovery'),
      '#collapsible' => TRUE,
      '#description' => t('See http://wiki.open311.org/Service_Discovery. This service discovery specification is meant to be read-only and can be provided either dynamically or using a manually edited static file.'),
    );

    $form['open311']['markaspot_logic_open311_contact'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('markaspot_logic_open311_contact', markaspot_logic_defaults('markaspot_logic_open311_contact')),
      '#title' => t('Open311 Contact Details'),
    );
    $form['open311']['markaspot_logic_open311_type'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('markaspot_logic_open311_type', markaspot_logic_defaults('markaspot_logic_open311_type')),
      '#title' => t('Open311 Server type. Either "production" or "test" defines whether the information is live and will be acted upon'),
    );
    $form['open311']['markaspot_logic_open311_key_service'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('markaspot_logic_open311_key_service', markaspot_logic_defaults('markaspot_logic_open311_key_service')),
      '#title' => t('Human readable information on how to get an API key'),
    );
    $form['open311']['markaspot_logic_open311_changeset'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('markaspot_logic_open311_changeset', markaspot_logic_defaults('markaspot_logic_open311_changeset')),
      '#title' => t('Sortable field that specifies the last time this document was updated'),
    );
    $form['open311']['markaspot_logic_open311_status_open_start'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('markaspot_logic_open311_status_open_start', markaspot_logic_defaults('markaspot_logic_open311_status_open_start')),
      '#title' => t('Enter the Status term-id when creating reports'),
    );
    $form['open311']['markaspot_logic_open311_status_open'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('markaspot_logic_open311_status_open', markaspot_logic_defaults('markaspot_logic_open311_status_open')),
      '#title' => t('Enter the Taxonomy term-ids for open reports (comma-separated)'),
    );
    $form['open311']['markaspot_logic_open311_status_closed'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('markaspot_logic_open311_status_closed', markaspot_logic_defaults('markaspot_logic_open311_status_closed')),
      '#title' => t('Enter the Taxonomy term-ids for closed reports (comma-separated)'),
    );
  }
  if (module_exists('markaspot_uuid')) {
    $form['uuid'] = array(
      '#type' => 'fieldset',
      '#title' => t('Auto Title and UUID'),
      '#collapsible' => TRUE,
      '#description' => t('The Mark-a-Spot UUID Module is enabled, so that service requests are "auto-titled" with the chosen service name
        plus an unique ID. This can be useful in an Open311 service oriented architecture.
        You can <a href="@module-page#edit-modules-mark-a-spot">disable</a> this module at any time, if you prefer user-generated node titles.', array('@module-page' => url('admin/modules'))),
    );
    $form['uuid']['markaspot_logic_uuid_title'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display UUID in title?'),
      '#default_value' => variable_get('markaspot_logic_uuid_title', markaspot_logic_defaults('markaspot_logic_uuid_title')),
    );
    $form['uuid']['markaspot_logic_title_pattern'] = array(
      '#type' => 'radios',
      '#title' => t('How should titles appear in report nodes?'),
      '#default_value' => variable_get('markaspot_logic_title_pattern', markaspot_logic_defaults('markaspot_logic_title_pattern')),
      '#options' => array(t('Service Name #3e80-67'), t('#3e80-67 Service Name')),
    );
    $form['uuid']['markaspot_logic_uuid_pattern'] = array(
      '#type' => 'radios',
      '#title' => t('Choose the UUID pattern.'),
      '#default_value' => variable_get('markaspot_logic_uuid_pattern', markaspot_logic_defaults('markaspot_logic_uuid_pattern')),
      '#options' => array(t('#3e80-67'), t('#3e8031-67'), t('#3e8031b0-67')),
    );

  }

  if (module_exists('markaspot_archive')) {
    $form['archive'] = array(
      '#type' => 'fieldset',
      '#title' => t('Archive Settings'),
      '#collapsible' => TRUE,
      '#description' => t('Set the period in days since reports have been last edited. Closed reports earlier than this period will be archived automatically'),
    );
    $form['archive']['markaspot_logic_archive_days'] = array(
      '#type' => 'textfield',
      '#size' => '2',
      '#default_value' => variable_get('markaspot_logic_archive_days', markaspot_logic_defaults('markaspot_logic_archive_days')),
      '#title' => t('Days'),
    );
  }

  if (module_exists('markaspot_tweet311')) {
    $form['twitter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Tweet311 Settings'),
      '#description' => t('Let Twitter-Users sending issues by sending mentions to') . ' ' . variable_get('markaspot_logic_twittername') . '. ' . t('Tweet-location should be enabled. Tweets are applied to category-id by hashtag (#id)'),
    );

    $form['twitter']['markaspot_logic_twittername'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter Name'),
      '#default_value' => variable_get('markaspot_logic_twittername', markaspot_logic_defaults('markaspot_logic_twittername')),
      '#size' => '16',
      '#maxlength' => 16,
      '#description' => t('Which Twitter-Username will be searched for mentions'),
    );
    $form['twitter']['manual_import'] = array(
      '#markup' => '<p>' . l(t('Manually import tweets'), 'admin/config/system/mark_a_spot/tweets/import') . '</p>',
    );
    $form['twitter']['markaspot_logic_tweetSearch'] = array(
      '#type' => 'radios',
      '#title' => t('Search in tweets for #hashtags or Service Code'),
      '#default_value' => variable_get('markaspot_logic_twittername'),
      '#options' => array(t('Hash'), t('Service Code')),
    );
  }

  return system_settings_form($form);
}

/**
 * Implemments hook_page_alter().
 */
function markaspot_logic_page_alter(&$page) {
  // Add help text to the user login block.
  $page['footer']['system_powered-by'] = array(
    '#weight' => -10,
    // Please be nice, give attribution:
    '#markup' => '<span>' . t('Built with <a id="mas-link" href="http://mark-a-spot.org">Mark-a-Spot</a>') . '</span>',
  );
}


/**
 * Default texts for text variables that build the configuration page.
 */
function markaspot_logic_defaults($id) {
  switch ($id) {
    case 'markaspot_logic_ini_lat':
      return '50.8212596';

    case 'markaspot_logic_ini_lng':
      return '6.8961028';

    case 'markaspot_logic_address':
      return 'Pingsdorfer Straße 88, 50321 Brühl, Deutschland';

    case 'markaspot_logic_city':
      return 'Brühl, Erftstadt';

    case 'markaspot_logic_country':
      return 'Deutschland';

    case 'markaspot_logic_twittername':
      return '@mascity';

    case 'markaspot_logic_ini_tweetSearch':
      return '1';

    case 'markaspot_logic_bbox_nw_lat':
      return '50.8463';

    case 'markaspot_logic_bbox_nw_lng':
      return '6.832';

    case 'markaspot_logic_bbox_se_lat':
      return '50.8042';

    case 'markaspot_logic_bbox_se_lng':
      return '6.937';

    case 'markaspot_logic_archive_days':
      return '30';

    case 'markaspot_logic_uuid_title':
      return 1;

    case 'markaspot_logic_uuid_pattern':
      return 0;

    case 'markaspot_logic_title_pattern':
      return 0;

    case 'markaspot_logic_map_type':
      return 2;

    case 'markaspot_logic_open311_contact':
      return 'You can email or call for assistance api@mycity.org +1 (555) 555-5555';

    case 'markaspot_logic_open311_status_open_start':
      return '5';

    case 'markaspot_logic_open311_status_open':
      return '5,6';

    case 'markaspot_logic_open311_status_closed':
      return '7,8';

    case 'markaspot_logic_open311_changeset':
      return '2013-11-03 00:00';

    case 'markaspot_logic_open311_key_service':
      return 'You can request a key here: http://api.mycity.gov/api_key/request';

    case 'markaspot_logic_open311_type':
      return 'production';

    case 'markaspot_logic_osm_custom_tile_url':
      return 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';

    case 'markaspot_logic_osm_custom_attribution':
      return 'Map Data © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';

    default:
      return FALSE;
  }
}


/**
 * Implements hook_block_info().
 */
function markaspot_logic_block_info() {

  $blocks['taxonomy_category'] = array(
    'info' => t('Mark-a-Spot Categories'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['taxonomy_status'] = array(
    'info' => t('Mark-a-Spot Status'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['markaspot_map'] = array(
    // info: The name of the block.
    'info' => t('Mark-a-Spot reports List (Map View)'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function markaspot_logic_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  $block = array();

  switch ($delta) {
    case 'taxonomy_category':
      $block['subject'] = t('Services');
      $block['content'] = markaspot_logic_contents($delta);
      break;

    case 'taxonomy_status':
      $block['subject'] = t('Status');
      $block['content'] = markaspot_logic_contents($delta);
      break;

    case 'markaspot_map':
      $block['subject'] = t('reportList');
      $block['content'] = markaspot_logic_contents($delta);
      break;
  }
  return $block;
}


/**
 * A module-defined block content function.
 */
function markaspot_logic_contents($which_block) {
  switch ($which_block) {

    case 'taxonomy_category':
      $list_category = NULL;
      $list_category .= '<div class="btn-group dropdown"><button class="btn btn-primary dropdown-toggle" data-toggle="dropdown">' . t('Services') . ' <span class="caret"></span></button>';

      $alter['html'] = TRUE;
      $alter['max_length'] = 125;
      $alter['word_boundary'] = TRUE;
      $alter['ellipsis'] = TRUE;
      $list_category .= '<ul class="dropdown-menu">';

      $list_category .= '<li class="marker-category-wrapper-all">' . l(t('All'), '', array('attributes' => array('class' => 'map-menue-all marker-category'))) . '</li>';

      $taxonomies = taxonomy_get_tree(1, $parent = 0, $max_depth = 1, $load_entities = TRUE);
      foreach ($taxonomies as $term) {
        $list_category .= '<li class="marker-status-wrapper">' . l('<span class="icon-' . $term->field_category_icon[LANGUAGE_NONE][0]['value'] . '"></span> ' . views_trim_text($alter, check_plain($term->name)), 'taxonomy/term/' . $term->tid, array(
            'attributes' => array(
              'class' => 'map-menue marker-category col-' . $term->field_category_hex[LANGUAGE_NONE][0]['value'],
              'id' => 'tax-' . $term->tid,
            ),
            'html' => TRUE,
          )) . '</li>';
      }
      $list_category .= '</ul>';
      $list_category .= '</div>';

      return $list_category;

    case 'taxonomy_status':
      $list_status = NULL;
      $list_status .= '<div class="btn-group dropdown"><button class="btn btn-primary dropdown-toggle" data-toggle="dropdown">' . t('Status') . ' <span class="caret"></span></button>';

      $alter['html'] = TRUE;
      $alter['max_length'] = 25;
      $alter['word_boundary'] = TRUE;
      $alter['ellipsis'] = TRUE;
      $list_status .= '<ul class="dropdown-menu">';

      $list_status .= '<li class="marker-status-wrapper-all">' . l(t('All'), '', array('attributes' => array('class' => 'map-menue-all marker-status'))) . '</li>';

      $taxonomies = taxonomy_get_tree(2, $parent = 0, $max_depth = 1, $load_entities = TRUE);
      foreach ($taxonomies as $term) {
        $list_status .= '<li class="marker-status-wrapper">' . l('<span class="icon-' . $term->field_status_icon[LANGUAGE_NONE][0]['value'] . '"></span> ' . views_trim_text($alter, check_plain($term->name)), 'taxonomy/term/' . $term->tid, array(
            'attributes' => array(
              'class' => 'map-menue marker-status col-' . $term->field_status_hex[LANGUAGE_NONE][0]['value'],
              'id' => 'tax-' . $term->tid,
            ),
            'html' => TRUE,
          )) . '</li>';
      }
      $list_status .= '</ul>';
      $list_status .= '</div>';

      return $list_status;

    case 'markaspot_map':
      $list_map = NULL;
      $list_map = '<ul id="markersidebar"></ul>';
      return $list_map;

    default:
      return FALSE;
  }
}


/**
 * Implements hook_entity_info_alter().
 */
function markaspot_logic_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['report_list'] = array(
    'label' => t('Report List'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_preprocess_node().
 */
function markaspot_logic_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'report_list') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__report_list';
  }
  return $vars;
}
