<?php

/**
 * @file
 * Provides content and text mapping and creating nodes from tweets
 * Most of the code taken from Twitter Import Module
 * by fabianderijk http://drupal.org/user/278745
 * http://drupal.org/project/twitter_import
 */

/**
 * Implements hook_cron().
 */
function markaspot_tweet311_cron() {
  _markaspot_tweet311_import_terms();
}

/**
 * Manually import tweets.
 */
function _markaspot_tweet311_import_manual() {
  _markaspot_tweet311_import_terms();
  drupal_goto('admin/config/system/mark_a_spot/');
}

/**
 * Function that imports the tweets from the term search.
 */
function _markaspot_tweet311_import_terms() {
  $account = variable_get('markaspot_twittername', '');

  if (!empty($account)) {

    if (!module_exists('twitter')) {
      return FALSE;
    }

    // Load the twitter module.
    module_load_include('inc', 'twitter');
    $account = twitter_account_load($account);

    // $twitter = new Twitter;
    $twitter = twitter_connect($account);
    $params = array('include_entities' => TRUE);
    $data = $twitter->mentions_timeline($params);

    _markaspot_tweet311_create_content($data, TRUE);
  }
  return TRUE;
}


/**
 * Import tweets.
 *
 * @param object $data
 *   tweet object
 * @param bool $usercheck
 *   Check user?
 */
function _markaspot_tweet311_create_content($data, $usercheck = FALSE) {
  if (!empty($data)) {
    // $results = drupal_json_decode($data->data);
    $varusers = variable_get('markaspot_tweet311_user', '');
    $importuser = explode(',', drupal_strtolower($varusers));

    if (!empty($data)) {
      foreach ($data as $tweet) {
        // die;
        if ($tweet->user->screen_name != $importuser || !$usercheck) {
          $safeuser = explode(',', drupal_strtolower(variable_get('markaspot_tweet311_term_safe_user', '')));

          // Checking if tweet is already imported.
          $query = db_select('twitter_import', 'ti');
          $query->condition('ti.tweet_id', $tweet->id)
            ->fields('ti', array('id'))
            ->range(0, 1);
          $result = $query->execute();
          $num_rows = $query->countQuery()->execute()->fetchField();
          if (empty($num_rows)) {
            if (in_array(drupal_strtolower($tweet->user->screen_name), $safeuser) || in_array(drupal_strtolower($tweet->user->screen_name), $importuser)) {
              $status = 1;
            }
            else {
              $status = 0;
            }

            $fid = 0;

            if (strstr($tweet->text, variable_get('markaspot_twittername'))) {

              db_insert('twitter_import')
                ->fields(array(
                  'tweet_id' => $tweet->id,
                  'user' => $tweet->user->screen_name,
                  'tweet' => $tweet->text,
                  'created' => strtotime($tweet->created_at),
                  'data' => drupal_json_encode($tweet),
                  'status' => $status,
                  'source' => $tweet->user->screen_name,
                  'fid' => $fid,
                ))
                ->execute();

              // Only import tweet if tweet applies to a known service:
              $node = _markaspot_tweet311_map_node($tweet, $tweet->user->screen_name);
              if (isset($node)) {
                node_save($node);
                watchdog('markaspot_tweet311', 'Tweet imported with Hashtag', array(), WATCHDOG_INFO);
              }
              else {
                watchdog('markaspot_tweet311', 'Tweet found but no matching Hashtag', array(), WATCHDOG_INFO);
              }
            }
          }
        }
      }
    }
  }
  else {
    drupal_set_message(t('Error while importing Tweets; Code: @code', array('@code' => $data->code)), 'error');
  }
}


/**
 * Get the profile pic from twitter if not already downloaded.
 */
function _markaspot_tweet311_get_profile_pic($userid, $picurl) {
  $fid = FALSE;

  $filename = $userid . '.png';
  $folder = 'markaspot_tweet311_profile_pics/';
  $complete = $folder . $filename;

  $folderuri = file_build_uri($folder);
  $uri = file_build_uri($complete);
  $path = drupal_realpath($uri);

  if (!file_exists($path) || filemtime($path) < (REQUEST_TIME - 604800)) {
    $data = @file_get_contents($picurl);
    drupal_mkdir($folderuri);
    $file = file_save_data($data, $uri, FILE_EXISTS_REPLACE);
    $fid = $file->fid;
  }
  else {
    $fid = _markaspot_tweet311_get_fid_from_uri($uri);
  }

  if (isset($fid)) {
    return $fid;
  }

}


/**
 * Retrieve file id from URL.
 *
 * @param string $uri
 *   get the file id
 *
 * @return bool
 *   No file
 */
function _markaspot_tweet311_get_fid_from_uri($uri) {
  $query = db_select('file_managed', 'fm');
  $query->condition('fm.uri', $uri)
    ->fields('fm', array('fid'))
    ->range(0, 1);
  $result = $query->execute();
  foreach ($result as $record) {
    return $record->fid;
  }
  return FALSE;
}


/**
 * Reformat urls.
 */
function _markaspot_tweet311_twitterify($ret, $target = '_blank') {
  $ret = preg_replace("#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t< ]*)#", "\\1<a href=\"\\2\" target=\"" . $target . "\">\\2</a>", $ret);
  $ret = preg_replace("#(^|[\n ])((www|ftp)\.[^ \"\t\n\r< ]*)#", "\\1<a href=\"http://\\2\" target=\"" . $target . "\">\\2</a>", $ret);
  $ret = preg_replace("/@(\w+)/", "<a href=\"http://www.twitter.com/\\1\" target=\"" . $target . "\">@\\1</a>", $ret);
  $ret = preg_replace("/#(\w+)/", "<a href=\"http://search.twitter.com/search?q=\\1\" target=\"" . $target . "\">#\\1</a>", $ret);
  return $ret;
}

/**
 * Load Tweet from entity.
 *
 * @param int $tid
 *   The Tweet ID
 *
 * @return mixed
 *   The tweet found
 */
function markaspot_tweet311_load_tweet($tid) {
  $query = db_select('twitter_import', 'ti')
    ->fields('ti', array('tweet', 'user'))
    ->condition('ti.id', $tid)
    ->range(0, 1);

  $result = $query->execute();
  foreach ($result as $record) {
    return $record;
  }
}


/**
 * Retrieving the tid out of hashtag or service code by hash.
 *
 * @param object $tweet
 *   The tweet imported.
 *
 * @return object
 *   The taxonomy object
 */
function _markaspot_get_taxonomy($tweet) {

  // Getting all servicecodes or hashes.
  $taxonomies = taxonomy_get_tree(1, 0, 1, TRUE);

  foreach ($taxonomies as $taxonomy_term) {
    if (variable_get('markaspot_tweetSearch') == 1) {
      $services[] = '#' . $taxonomy_term->field_category_id['und'][0]['value'];
    }
    else {
      if (isset($taxonomy_term->field_hash['und'][0]['value'])) {
        $service_hashes = explode(',', $taxonomy_term->field_hash['und'][0]['value']);
        foreach ($service_hashes as $service) {
          $services[] = '#' . trim($service);
        }
      }
    }
  }

  // Checking the incoming mentions of citizens for matching available services:
  if (!isset($services)) {
    return FALSE;
  }
  foreach ($services as $service) {

    if (strpos($tweet->text, $service) !== FALSE) {
      $service_found = substr($service, 1);

      // Matching now service_code or hash-tag with taxonomy term ID (tid):
      $query = new EntityFieldQuery();

      $query
        ->entityCondition('entity_type', 'taxonomy_term', '=')
        ->propertyCondition('vid', 1);

      // Switch Service Code or Service Name:
      if (variable_get('markaspot_tweetSearch') == 1) {
        $query
          ->fieldCondition('field_category_id', 'value', array($service_found), '=');
      }
      else {
        $query
          ->fieldCondition('field_hash', 'value', '%' . $service_found . '%', 'LIKE');
      }
      $taxonomy_found = $query->execute();
      $tid = array_keys($taxonomy_found["taxonomy_term"]);

      // Load term as object from id:
      $taxonomy_term_found = taxonomy_term_load($tid[0]);
      return $taxonomy_term_found;
    }
  }
}


/**
 * Mapping a georeport service request to drupal node.
 *
 * @param array $tweet
 *   The tweet imported.
 *
 * @return object
 *   The node object
 */
function _markaspot_tweet311_map_node($tweet, $twitter_user) {

  $node = new stdClass();
  $node->language = 'und';

  $user = _markaspot_tweet311_twitter_create_user_from_tweet($twitter_user);

  // Loading the taxonomy term by requested hashed #service_code or #hash-tag:
  $service = _markaspot_get_taxonomy($tweet);

  if (isset($service->name)) {
    $node->title = $service->name;
    $node->field_category[$node->language][0]['tid'] = $service->tid;

    $node->uid = $user->uid;
    $node->created = time();
    $node->modified = time();

    if (isset($tweet->entities['media'][0]['media_url'])) {
      $fid = _markaspot_tweet311_get_tweet_pic($tweet->entities['media'][0]['media_url']);
      $node->field_image[$node->language][0]['fid'] = $fid;
    }

    // Applying it to title and it's taxonomyId to field_category:
    $node->field_status[$node->language][0]['tid'] = 5;

    $node->body[$node->language][0]['value'] = $tweet->text;
    $node->body[$node->language][0]['format'] = 'filtered_html';

    // Make Requests valid only in the municiple:
    $node->field_city[$node->language][0]['value'] = variable_get('markaspot_city');

    $node->field_geo[$node->language][0]['lat'] = (isset($tweet->geo['coordinates'][0])) ? $tweet->geo['coordinates'][0] : variable_get('markaspot_ini_lat');
    $node->field_geo[$node->language][0]['lng'] = (isset($tweet->geo['coordinates'][1])) ? $tweet->geo['coordinates'][1] : variable_get('markaspot_ini_lng');
    global $base_url;
    $url_parts = parse_url($base_url);
    $node->field_e_mail[$node->language][0]['value'] = 'no-reply@' . $url_parts['host'];
    $node->status = 0;
    $node->is_new = TRUE;
    $node->type = 'report';
  }
  else {
    $node = NULL;
  }

  return $node;
}


/**
 * Get the profile pic from twitter.
 */
function _markaspot_tweet311_get_tweet_pic($picurl) {

  $filename = substr(hash('sha256', time()), 0, 8) . '.png';
  $folder = 'mas_tweet311/';
  $complete = $folder . $filename;

  $folderuri = file_build_uri($folder);
  $uri = file_build_uri($complete);
  $path = drupal_realpath($uri);

  if (!file_exists($folderuri)) {
    drupal_install_mkdir($folderuri, array(FILE_READABLE));
  }
  if (!file_exists($path) || filemtime($path) < (REQUEST_TIME - 604800)) {
    $data = @file_get_contents($picurl);
    $file = file_save_data($data, $uri, FILE_EXISTS_REPLACE);
    $fid = $file->fid;
  }
  else {
    $fid = _markaspot_tweet311_get_fid_from_uri($uri);
  }

  if ($fid) {
    return $fid;
  }

  return $fid;
}


/**
 * Create user from tweet.
 *
 * @param string $username
 *   Twitter name
 *
 * @return bool
 *   The user object
 */
function _markaspot_tweet311_twitter_create_user_from_tweet($username) {

  // Check if user is already registered:
  if (!db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(':name' => $username))->fetchField()) {
    $new_user = array(
      'name' => $username,
      // note: do not md5 the password:
      'pass' => '',
      'mail' => '',
      'status' => 1,
      'init' => $username,
      'roles' => array(4),
    );
    $user = user_save(NULL, $new_user);
  }
  else {
    // Yes, we have $username;
    $user = user_load_by_name($username);
  }
  return $user;

}
