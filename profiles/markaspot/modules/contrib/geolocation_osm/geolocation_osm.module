<?php

/**
 * @file
 * osm OSM widget and formaters for Geolocation.
 */

/**
 * Implements hook_libraries_info().
 */
function geolocation_osm_libraries_info() {
  $libraries['leaflet'] = array(
    // Only used in administrative UI of Libraries API.
    'name' => 'Leaflet JavaScript Library',
    'vendor url' => 'http://leafletjs.com/',
    'download url' => 'http://leaflet-cdn.s3.amazonaws.com/build/leaflet-0.7.1.zip',
    // .7: version="0.7"
    'version arguments' => array(
      'file' => 'leaflet.js',
      'pattern' => '/version="([\d+\.]*\d+)"/',
    ),
    'files' => array(
      'js' => array(
        // This setting is needed in order to properly render marker images.
        'leaflet_root_url' => array(
          'type' => 'inline',
          'data' => 'L_ROOT_URL = "' . base_path() . libraries_get_path('leaflet') . '/";',
          'group' => JS_LIBRARY,
          'preprocess' => FALSE,
        ),
        'leaflet.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'preprocess' => FALSE,
        ),
      ),
      'css' => array(
        'leaflet.css' => array(
          'type' => 'file',
          'media' => 'all',
        ),
        'leaflet.ie.css' => array(
          'browsers' => array(
            'IE' => 'lte IE 8',
            '!IE' => FALSE,
          ),
        ),
      ),
    ),
    // 'integration files' => array(
    //  'leaflet' => array(
    //    'js' => array('leaflet.drupal.js'),
    //  ),
    // ),
  );

  return $libraries;
}




/**
 * Implements hook_field_formatter_info().
 */
function geolocation_osm_field_formatter_info() {
  global $base_url;
  return array(
    'geolocation_osm_static' => array(
      'label' => t('Static OSM Map'),
      'field types' => array('geolocation_latlng'),
      'settings' => array(
        'map_dimensions' => '300x300',
        'map_key' => '',
        'mapbox' => FALSE,
        'map_imageformat' => 'png',
        'marker_icon' => $base_url  . '/' . libraries_get_path('leaflet') . '/images/marker-icon.png',
        'map_zoomlevel' => '15',
        'leafletImagePath' => $base_url  . '/' . libraries_get_path('leaflet') . '/images/',
        'tile_server_static' => 'http://dev.openstreetmap.de/staticmap/',
      ),
    ),
    'geolocation_osm_dynamic' => array(
      'label' => t('Dynamic OSM Leaflet Map'),
      'field types' => array('geolocation_latlng'),
      'settings' => array(
        'map_dimensions' => '300x300',
        'map_zoomlevel' => '15',
        'marker_icon' => $base_url  . '/' . libraries_get_path('leaflet') . '/images/marker-icon.png',
        'leafletImagePath' => $base_url  . '/' . libraries_get_path('leaflet') . '/images/',
        'map_scrollwheel' => FALSE,
        'tile_server_dynamic' => 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function geolocation_osm_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $type = $display['type'];
  $settings = $display['settings'];

  $element = array();

  // Implement some configuration options.
  $element['map_dimensions'] = array(
    '#type' => 'textfield',
    '#title' => t('Map dimensions'),
    '#description' => t('Enter custom map dimensions, default is 300x300.'),
    '#default_value' => $settings['map_dimensions'],
  );
  $element['marker_icon'] = array(
    '#type' => 'textfield',
    '#title' => t('Marker icon'),
    '#description' => t('Set the path to the icon marker you wish to use. This has to be relative to the Drupal installation.'),
    '#default_value' => $settings['marker_icon'],
  );
  $element['map_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Map Key'),
    '#description' => t('Set the Operators API Key if needed.'),
    '#default_value' => $settings['map_key'],
  );
  $element['tile_server_dynamic'] = array(
    '#type' => 'textfield',
    '#title' => t('Tile Server Dynamic Maps'),
    '#description' => t('Insert the OSM tile server operator'),
    '#default_value' => $settings['tile_server_dynamic'],
  );
  $element['tile_server_static'] = array(
    '#type' => 'textfield',
    '#title' => t('Tile Server Static Map'),
    '#description' => t('Insert the OSM tile server operator for static maps, e.g http://api.tiles.mapbox.com/v3/'),
    '#default_value' => $settings['tile_server_static'],
  );


  /*
   *
   $element['geocode_service'] = array(
    '#type' => 'textfield',
    '#title' => t('Geocoding URL'),
    '#description' => t('Insert the OSM geocoding server'),
    '#default_value' => $settings['geocode_service'],
  );*/
  $element['bbox'] = array(
    '#type' => 'textfield',
    '#title' => t('Bounding Box defining the area of Geocoding'),
    '#description' => t('Format: "viewbox=<left>,<top>,<right>,<bottom>"'),
    '#default_value' => $settings['bbox'],
  );

  // Image format is used only for static maps.
  // http://api.tiles.mapbox.com/v3/examples.map-zr0njcqy/-73.99,40.70,13/500x300.png

  switch ($type) {
    case 'geolocation_osm_static':
      $element['map_imageformat'] = array(
        '#type' => 'select',
        '#title' => t('Image format'),
        '#options' => array(
          'png' => '8-bit PNG (default)',
          'png32' => '32-bit PNG',
          'gif' => 'GIF',
          'jpg' => 'JPEG',
        ),
        '#description' => t('Choose an Image Format. jpg and jpg-baseline typically provide the smallest image size, though they do so through "lossy" compression which may degrade the image. gif, png8 and png32 provide lossless compression.'),
        '#default_value' => $settings['map_imageformat'],
      );
      $element['mapbox'] = array(
        '#type' => 'checkbox',
        '#title' => t('Is Mapbox your Tile Server Operator?'),
        '#description' => t('Enable here.'),
        '#default_value' => $settings['mapbox'] ? $settings['mapbox'] : FALSE,
      );
      break;

    case 'geolocation_osm_dynamic':
      $element['map_scrollwheel'] = array(
        '#type' => 'checkbox',
        '#title' => t('Scroll Zoom'),
        '#description' => t('By default zooming is done with double click and/or using the map controls to avoid interrupting the normal window scroll. It can optionally be enabled here.'),
        '#default_value' => $settings['map_scrollwheel'],
      );
      break;
  }


  $element['leafletImagePath'] = array(
    '#type' => 'textfield',
    '#title' => t('Leaflet Image Path'),
    '#description' => t('Set the image path of your leaflet library (needed with compressed javascript on production sites, see https://github.com/Leaflet/Leaflet/issues/766'),
    '#default_value' => $settings['leafletImagePath'],
  );

  $element['map_zoomlevel'] = array(
    '#type' => 'select',
    '#title' => t('Zoom level'),
    '#options' => array(
      '1' => '1',
      '2' => '2',
      '3' => '3',
      '4' => '4',
      '5' => '5',
      '6' => '6',
      '7' => '7 (default)',
      '8' => '8',
      '9' => '9',
      '10' => '10',
      '11' => '11',
      '12' => '12',
      '13' => '13',
      '14' => '14',
      '15' => '15',
      '16' => '16',
      '17' => '17',
      '18' => '18',
      '19' => '19',
    ),
    '#description' => t('Choose a custom zoom level - the higher the number the closer. <em>High zoom warning:</em> Google might not return images for any combination of Map Type and Zoom Level.'),
    '#default_value' => $settings['map_zoomlevel'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function geolocation_osm_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $type = $display['type'];
  $settings = $display['settings'];

  $summary = '<strong>Map:</strong> ' . check_plain($settings['map_dimensions']) . '<br />';;
  $summary .= isset($settings['map_key']) ? '<strong>Operator Key:</strong> ' . check_plain($settings['map_key'])  . '<br />' : '';
  switch ($type) {
    case 'geolocation_osm_static':
      $summary .= '<strong>Image Format:</strong> ' . check_plain($settings['map_imageformat']);
      $summary .= '<br />';

      $mapbox = $settings['mapbox'] == TRUE ? t('Yes') : t('No');
      $summary .= '<br />';
      $summary .= '<strong>Mapbox:</strong> ' . $mapbox . '<br />';
      $summary .= '<strong>Tile Server Static:</strong> ' . check_plain($settings['tile_server_static']) . '<br />';

      break;

    case 'geolocation_osm_dynamic':
      $summary .= '<br />';
      $scrl = isset($settings['map_scrollwheel']) ? t('Yes') : t('No');
      $summary .= '<strong>Scrollable:</strong> ' . $scrl . '<br />';
      $summary .= '<br />';
      $summary .= '<strong>Tile Server Dynamic:</strong> ' . check_plain($settings['tile_server_dynamic']) . '<br />';

      break;
  }
  $summary .= '<strong>Zoom:</strong> ' . check_plain($settings['map_zoomlevel']);

  if (!empty($settings['marker_icon'])) {
    $vars = array(
      'path' => check_plain($settings['marker_icon']),
    );
    $summary .= '<br /><strong>Icon:</strong> ' . theme('image', $vars);
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function geolocation_osm_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();


  switch ($display['type']) {

    case 'geolocation_osm_static':
      foreach ($items as $delta => $item) {
        $query = array(
          'key' => $settings['map_key'],
          'zoom' => $settings['map_zoomlevel'],
          'size' => $settings['map_dimensions'],
          'format' => $settings['map_imageformat'],
          'center' => $item['lat'] . ',' . $item['lng'],
          'markers' => 'size:mid|color:red|' . $item['lat'] . ',' . $item['lng'],
        );
        if ($settings['marker_icon']) {
          $path = file_create_url($settings['marker_icon']);
          $query['markers'] = 'icon:' . $path . '|' . $query['markers'];
        }

        if ($settings['mapbox'] == TRUE) {
          // http://api.tiles.mapbox.com/v3/examples.map-zr0njcqy/-73.99,40.70,13/500x300.png

          $path = url($settings['tile_server_static'] . $settings['map_key'] . '/' . $item['lng'] . ',' .
            $item['lat'] . ',' . $settings['map_zoomlevel']. '/' . $settings['map_dimensions'] . '.' . $settings['map_imageformat']);
        }
        else {
          $path = url($settings['tile_server_static'], array('query' => $query));
        }

        $variables = array(
          'path' => $path,
          'alt' => t('Geolocation'),
          'attributes' => array('class' => 'geolocation-osm-static'),
        );
        $map_img = theme('image', $variables);
        $element[$delta]['#markup'] = '<div>' . $map_img . '</div>';
      }
      break;

    case 'geolocation_osm_dynamic':
      $info = entity_get_info($entity_type);
      $key = isset($info['entity keys']['name']) ? $info['entity keys']['name'] : $info['entity keys']['id'];
      $eid = $entity->$key;

      foreach ($items as $delta => $item) {

        $width = strtok($settings['map_dimensions'], 'x');
        $height = strtok('');

        $id = 'geolocation-osm-dynamic-' . 'e_' . $eid . 'i_' . $instance['id'] . '-d_' . $delta;
        $map_element['osm'] = array(
          '#prefix' => '<div id="' . $id . '" class="geolocation-map geolocation-osm-dynamic" ' . ' style="width:' . htmlentities($width) . ';height:' . htmlentities($height) . ';">',
          '#suffix' => '</div>',
        );

        // Attach CSS and JS files via FAPI '#attached'.
        $map_element['osm']['#attached']['css'][] = drupal_get_path('module', 'geolocation_osm') . '/geolocation_osm.css';

        $map_element['#attached']['js'][] = array(
          'data' => array('leaflet' => array($settings)),
          'type' => 'setting',
        );

        // Load the leaflet library, which includes integration files.
        $map_element['osm']['#attached']['css'][] = array(
          'data' => libraries_get_path('leaflet') . '/leaflet.css',
          'type' => 'file',
        );

        $map_element['osm']['#attached']['js'][] = array(
          'data' => libraries_get_path('leaflet') . '/leaflet.js',
          'type' => 'file',
        );


        $map_element['osm']['#attached']['js'][] = array(
          'data' => drupal_get_path('module', 'geolocation_osm') . '/geolocation_osm_dynamic_formatter.js',
          'type' => 'file',
          'scope' => 'footer',
        );
        // Add each delta to the settings array.
        $data = array(
          'formatters' => array(
            'e_' . $eid . 'i_' . $instance['id'] => array(
              "settings" => $settings,
              "deltas" => array(
                'd_' . $delta => array(
                  'lat' => $item['lat'],
                  'lng' => $item['lng'],
                ),
              ),
            ),
          ),
        );

        $map_element['osm']['#attached']['js'][] = array(
          'data' => array('geolocationOsm' => $data),
          'type' => 'setting',
        );

        $element[$delta] = $map_element;

      }
      break;

  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function geolocation_osm_field_widget_info() {
  return array(
    'geolocation_osm' => array(
      'label' => t('OpenStreetMap'),
      'field types' => array('geolocation_latlng'),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function geolocation_osm_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['tile_server_dynamic'] = array(
    '#type' => 'textfield',
    '#title' => t('Tile Server Operator'),
    '#description' => t('Tile map server URL'),
    '#default_value' => isset($settings['tile_server_dynamic']) ? $settings['tile_server_dynamic'] : 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',
  );
  /*
  $form['tile_server_static'] = array(
    '#type' => 'textfield',
    '#title' => t('Tile Server Operator Static Map'),
    '#description' => t('Tile map server URL'),
    '#default_value' => isset($settings['tile_server_static']) ? $settings['tile_server_static'] : 'http://dev.openstreetmap.de/staticmap/',
  );
  */
  $form['geocode_service'] = array(
    '#type' => 'textfield',
    '#title' => t('Geocoding Service'),
    '#description' => t('Insert a geocode service provider'),
    '#default_value' => isset($settings['geocode_service']) ? $settings['geocode_service'] : 'http://nominatim.openstreetmap.org',
  );
  $form['bbox'] = array(
    '#type' => 'textfield',
    '#title' => t('Bounding Box defining the area of Geocoding'),
    '#description' => t('Format viewbox=left,top,right,bottom'),
    '#default_value' => isset($settings['bbox']) ? $settings['bbox'] : FALSE,
  );
  $form['nominatimEmail'] = array(
    '#type' => 'textfield',
    '#title' => t('Nominatim E-Mail for load and problem reporting'),
    '#description' => t('If you are making large numbers of request please include a valid email address or alternatively include your email address as part of the User-Agent string. This information will be kept confidential and only used to contact you in the event of a problem, see Usage Policy for more details.'),
    '#default_value' => isset($settings['nominatimEmail']) ? $settings['nominatimEmail'] : FALSE,
  );
  $form['leafletImagePath'] = array(
    '#type' => 'textfield',
    '#title' => t('Leaflet Image path'),
    '#description' => t('Set the image path of your leaflet library (needed with compressed javascript on production sites, see https://github.com/Leaflet/Leaflet/issues/766'),
    '#default_value' => isset($settings['leafletImagePath']) ? $settings['leafletImagePath'] : FALSE,
  );
  $form['map_zoomlevel'] = array(
    '#type' => 'select',
    '#title' => t('Zoom Level at Start'),
    '#options' => array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),
    '#description' => t('By default zooming is done with double click and/or using the map controls to avoid interrupting the normal window scroll. It can optionally be enabled here.'),
    '#default_value' => isset($settings['map_zoomlevel']) ? $settings['map_zoomlevel'] : FALSE,
  );
  $form['scrollwheel'] = array(
    '#type' => 'checkbox',
    '#title' => t('Scroll Zoom'),
    '#description' => t('By default zooming is done with double click and/or using the map controls to avoid interrupting the normal window scroll. It can optionally be enabled here.'),
    '#default_value' => isset($settings['scrollwheel']) ? $settings['scrollwheel'] : FALSE,
  );
  $form['map_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Operator Map API Key'),
    '#default_value' => isset($settings['map_key']) ? $settings['map_key'] : FALSE,
  );
  $form['mapbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is Mapbox your Tile Server Operator?'),
    '#description' => t('Enable here.'),
    '#default_value' => isset($settings['mapbox']) ? $settings['mapbox'] : FALSE,
  );

  $form['marker_draggable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Draggable Marker'),
    '#description' => t('Enabling this will allow the user to darg/drop the marker to select a location.'),
    '#default_value' => isset($settings['marker_draggable']) ? $settings['marker_draggable'] : FALSE,
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function geolocation_osm_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $id = $instance['id'] . '-' . $delta;
  // Default NULL is not valid, so home is where the heart is ...
  $lat_value = isset($items[$delta]['lat']) ? $items[$delta]['lat'] : '50.93';
  $lng_value = isset($items[$delta]['lng']) ? $items[$delta]['lng'] : '6.96';
  $element += array(
    '#delta' => $delta,
  );

  switch ($instance['widget']['type']) {

    case 'geolocation_osm':
      $element['address'] = array(
        '#type' => 'item',
        '#title' => $element['#title'],
        '#prefix' => '<div id="geolocation-address-' . $id . '" class="geolocation-address">',
        '#suffix' => '</div>',
        '#required' => $instance['required'],
      );
      $element['address']['field'] = array(
        '#type' => 'textfield',
        '#maxlength' => 120,
        '#size' => 50,
      );
   /*   $element['address']['geocode'] = array(
        '#prefix' => '<span id="geolocation-address-geocode-' . $id . '" class="geolocation-address-geocode">',
        '#suffix' => '</span>',
        '#markup' => t('Get location'),
      ); */
      $element['help'] = array(
        '#prefix' => '<div id="geolocation-help-' . $id . '" class="geolocation-help">',
        '#suffix' => '</div>',
        '#markup' => t('Enter an address / location in the textfield or you can also click on the map to set a marker'),
      );
      $element['osm'] = array(
        '#prefix' => '<div id="geolocation-map-' . $id . '" class="geolocation-map" style="width:100%;height:400px;">',
        '#suffix' => '</div>',
      );
      // Presentational item.
      $element['latitem'] = array(
        '#type' => 'item',
        '#title' => t('Latitude:'),
        '#prefix' => '<div id="geolocation-lat-item-' . $id . '" class="geolocation-lat-item">',
        '#suffix' => '</div>',
        '#markup' => '<span class="geolocation-lat-item-value">' . $lat_value . '</span>',
        '#required' => $instance['required'],
      );
      $element['lat'] = array(
        '#type' => 'hidden',
        '#prefix' => '<div id="geolocation-lat-' . $id . '" class="geolocation-lat">',
        '#suffix' => '</div>',
        '#default_value' => $lat_value,
      );
      // Presentational item.
      $element['lngitem'] = array(
        '#type' => 'item',
        '#title' => t('Longitude:'),
        '#prefix' => '<div id="geolocation-lng-item-' . $id . '" class="geolocation-lng-item">',
        '#suffix' => '</div>',
        '#markup' => '<span class="geolocation-lng-item-value">' . $lng_value . '</span>',
        '#required' => $instance['required'],
      );
      $element['lng'] = array(
        '#type' => 'hidden',
        '#prefix' => '<div id="geolocation-lng-' . $id . '" class="geolocation-lng">',
        '#suffix' => '</div>',
        '#default_value' => $lng_value,
      );
      $element['remove'] = array(
        '#prefix' => '<div id="geolocation-remove-' . $id . '" class="geolocation-remove"><span>',
        '#suffix' => '</span></div>',
        '#markup' => t('Remove'),
      );

      // Attach CSS and JS files via FAPI '#attached'.
      $element['osm']['#attached']['css'][] = drupal_get_path('module', 'geolocation_osm') . '/geolocation_osm.css';


      /*
      $element['osm']['#attached']['js'][] = array(
        'data' => '//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.2/leaflet.js',
        'type' => 'external',
      );
      */
      $element['osm']['#attached']['css'][] = array(
        'data' => libraries_get_path('leaflet') . '/leaflet.css',
        'type' => 'file',
      );

      $element['osm']['#attached']['js'][] = array(
        'data' => libraries_get_path('leaflet') . '/leaflet.js',
        'type' => 'file',
      );


      $element['osm']['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'geolocation_osm') . '/geolocation_osm_widget.js',
        'type' => 'file',
        'scope' => 'footer',
      );

      // Make defaults available as javascript settings. In JS files use:
      // Drupal.settings.mapDefaults.lat
      $map_defaults_lat = ($lat_value) ? $lat_value : '';
      $map_defaults_lng = ($lng_value) ? $lng_value : '';
      $map_defaults = array(
        $id => array(
          'lat' => $map_defaults_lat,
          'lng' => $map_defaults_lng,
        ),
      );
      $data = array(
        'defaults' => $map_defaults,
        'settings' => $instance['widget']['settings'],
      );
      $element['osm']['#attached']['js'][] = array(
        'data' => array('geolocation' => $data),
        'type' => 'setting',
      );

      $element['#element_validate'] = array('geolocation_osm_field_widget_validate');

      break;
  }
  return $element;
}

/**
 * Validation handler for geolocation_osm_field_widget_form().
 */
function geolocation_osm_field_widget_validate($element, &$form_state, $form) {
  if ($element['#required']) {
    if (!$element['lat']['#value'] || !$element['lng']['#value']) {
      form_error($element, t('@name field is required.', array('@name' => $element['#title'])));
    }
  }
  else {
    switch (TRUE) {
      case $element['lng']['#value'] && !$element['lat']['#value']:
        form_error($element, t('@name field is incomplete, latitude value is missing.', array('@name' => $element['#title'])));
        break;

      case !$element['lng']['#value'] && $element['lat']['#value']:
        form_error($element, t('@name field is incomplete, longitude value is missing.', array('@name' => $element['#title'])));
        break;
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function geolocation_osm_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'geolocation_invalid_lat':
    case 'geolocation_invalid_lng':
      form_error($element, $error['message']);
      break;
  }
}
